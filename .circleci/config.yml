version: 2.1

orbs:
  win: circleci/windows@2.2.0
  macos: circleci/macos@2.3.4

workflows:
  main:
    jobs:
        ################################
        #### PIP
        ################################
        ################################
        - Pip-PyPI
        - Pip-Local
        ################################
        #### UNIT TESTS
        ################################
        ################################
        - Linux:
            name: "Test | v3.8 | Linux"
            v: "3.8"
            mode: "TEST"
            ray: "DISABLED"
        - Linux:
            name: "Test | v3.9 | Linux"
            v: "3.9"
            mode: "TEST"
            ray: "DISABLED"
        - Linux:
            name: "Test | v3.10 | Linux"
            v: "3.10"
            mode: "TEST"
            ray: "DISABLED"
        - Linux:
            name: "Test | v3.11 | Linux"
            v: "3.11"
            mode: "TEST"
            ray: "DISABLED"
        - Linux:
            name: "Test | Ray | v3.8 | Linux"
            v: "3.8"
            mode: "TEST"
            ray: "ENABLED"
        - Linux:
            name: "Test | Ray | v3.9 | Linux"
            v: "3.9"
            mode: "TEST"
            ray: "ENABLED"
        - Linux:
            name: "Test | Ray | v3.10 | Linux"
            v: "3.10"
            mode: "TEST"
            ray: "ENABLED"
        - Postgres:
            name: "Test | v3.10 | Linux | Postgres"
            v: "3.10"
            mode: "TEST"
        # Ray does not work on 3.11
        # https://github.com/ray-project/ray/issues/33232
        # - Linux:
        #     name: "Test | v3.11 | Linux"
        #     v: "3.11"
        #     mode: "TEST"
        #     ray: "ENABLED"
        ################################
        ### NOTEBOOKS
        ################################
        ################################
        - Linux:
            name: "Notebook | v3.8 | Linux"
            v: "3.8"
            mode: "NOTEBOOK"
            ray: "DISABLED"
        - Linux:
            name: "Notebook | v3.9 | Linux"
            v: "3.9"
            mode: "NOTEBOOK"
            ray: "DISABLED"
        - Linux:
            name: "Notebook | v3.10 | Linux"
            v: "3.10"
            mode: "NOTEBOOK"
            ray: "DISABLED"
        - Linux:
            name: "Notebook | v3.11 | Linux"
            v: "3.11"
            mode: "NOTEBOOK"
            ray: "DISABLED"            
        - Linux:
            name: "Notebook | Ray | v3.8 | Linux"
            v: "3.8"
            mode: "NOTEBOOK"
            ray: "ENABLED"
        - Linux:
            name: "Notebook | Ray | v3.9 | Linux"
            v: "3.9"
            mode: "NOTEBOOK"
            ray: "ENABLED"            
        - Linux:
            name: "Notebook |  Ray | v3.10 | Linux"
            v: "3.10"
            mode: "NOTEBOOK"
            ray: "ENABLED"            
        # - Linux:
        #     name: "Notebook | v3.11 | Linux"
        #     v: "3.11"
        #     mode: "NOTEBOOK"
        ################################
        ## LINTER
        ################################
        ################################
        - Linux:
            name: "Linter | Linux"
            v: "3.10"
            mode: "LINTER"
            ray: "DISABLED"
        ################################
        # OTHER OPERATING SYSTEMS
        ################################
        ################################
        #- Windows:
        #    name: "Windows | v3.10"
        # - MacOS:
        #    name: "MacOS | v3.10"
        ################################
        # DOCKER AND CLOUD
        ################################
        ################################
        - Docker-Local
        - AWS

jobs:
  Linux:
    parameters:
      v:
        type: string
        default: "3.10"
      mode:
        type: string
        default: "ALL"
      ray:
        type: string
        default: "DISABLED"
    resource_class: large
    docker:
      # https://circleci.com/docs/circleci-images#language-image-variants
      - image: "cimg/python:<< parameters.v >>"
    steps:

      - checkout

      - restore_cache:
          keys:
            - v1-model_cache-{{ checksum "setup.py" }}
      
      - run:
          name: Install EvaDB package from GitHub repo with all dependencies
          command: |
            "python<< parameters.v >>" -m venv test_evadb
            pip install --upgrade pip
            source test_evadb/bin/activate
            pip install ".[dev]"

      # Enable Ray (update evadb.yml file and install Ray package)
      - when:
          condition:
            equal: [ ENABLED, << parameters.ray >> ]
          steps:
            - run:
                name: Enable Ray setting in the config.yml file
                command: |
                  source test_evadb/bin/activate
                  python -c "import yaml;f = open('evadb/evadb.yml', 'r+');config_obj = yaml.load(f, Loader=yaml.FullLoader);config_obj['experimental']['ray'] = True;f.seek(0);f.write(yaml.dump(config_obj));f.truncate();"
                  pip install ".[ray]"

      # Install Ludwig also installs ray. However, the ray test will not involve ludwig now. 
      - when:
          condition:
            equal: [ DISABLED, << parameters.ray >> ]
          steps:
            - run:
                name: Install Ludwig
                command: |
                  source test_evadb/bin/activate
                  pip install ".[dev,ludwig]"
      
      # Install qdrant only on versions < 3.11
      - when:
          condition:
            not:
              equal: [ "3.11", << parameters.v >> ]
          steps:
            - run:
                name: Install Qdrant
                command: |
                  source test_evadb/bin/activate
                  pip install ".[qdrant]"

      - run:
          name: Test and upload coverage report to coveralls
          no_output_timeout: 30m # 30 minute timeout
          command: |
            source test_evadb/bin/activate
            bash script/test/test.sh -m "<< parameters.mode >>"

      # Enable cache save conditionally (to avoid empty cache in Notebooks)
      - when:
          condition: 
            equal: [ TEST, << parameters.mode >> ]
          steps:
            - save_cache:
                key: v1-model_cache-{{ checksum "setup.py" }}
                paths:
                  - /home/circleci/.cache/huggingface/
                  - /home/circleci/.cache/torch/
                  - /home/circleci/.cache/gpt4all/

  Postgres:
    parameters:
      v:
        type: string
        default: "3.10"
      mode:
        type: string
        default: "ALL"

    resource_class: large
    docker:
      # https://circleci.com/docs/circleci-images#language-image-variants  DATABASE_URL: postgresql://postgres:password@localhost:5432/evadb
      - image: "cimg/python:<< parameters.v >>"
        environment:
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: password
          PGDATABASE: evadb
          DATABASE_URL: postgresql://postgres:password@localhost:5432/evadb
          POSTGRES_DB: evadb
      - image: "cimg/postgres:14.8"
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: evadb
    steps:

      - checkout

      - restore_cache:
          keys:
            - v1-model_cache-{{ checksum "setup.py" }}

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

      - run:
          name: Wait for db to run
          command : dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Install EvaDB package from GitHub repo with all dependencies
          command: |
            "python<< parameters.v >>" -m venv test_evadb
            pip install --upgrade pip
            source test_evadb/bin/activate
            pip install ".[dev]"

      - run:
          name: Update the evadb yml file to postgres backend.
          command: |
             source test_evadb/bin/activate
             python -c "import yaml;f = open('evadb/evadb.yml', 'r+');config_obj = yaml.load(f, Loader=yaml.FullLoader);config_obj['core']['catalog_database_uri'] = 'postgresql://postgres:password@localhost:5432/evadb';f.seek(0);f.write(yaml.dump(config_obj));f.truncate();"
             pip install ".[postgres]"

      # Install qdrant only on versions < 3.11
      - when:
          condition:
            not:
              equal: [ "3.11", << parameters.v >> ]
          steps:
            - run:
                name: Install Qdrant
                command: |
                  source test_evadb/bin/activate
                  pip install ".[qdrant]"

      - run:
          name: Test and upload coverage report to coveralls
          no_output_timeout: 30m # 30 minute timeout
          command: |
            source test_evadb/bin/activate
            bash script/test/test.sh -m "<< parameters.mode >>"

      # Enable cache save conditionally (to avoid empty cache in Notebooks)
      - when:
          condition: 
            equal: [ TEST, << parameters.mode >> ]
          steps:
            - save_cache:
                key: v1-model_cache-{{ checksum "setup.py" }}
                paths:
                  - /home/circleci/.cache/huggingface/
                  - /home/circleci/.cache/torch/
                  - /home/circleci/.cache/gpt4all/

  Windows:
      executor: win/default
      steps:
        - checkout
        - run: 
            name: Install EvaDB package from GitHub repo and run tests
            command: |
              choco install python --version=3.10.8 -y
              python --version
              pip --version
              pip install virtualenv
              virtualenv test_evadb
              test_evadb\Scripts\activate
              pip install ".[dev]"
              bash script\test\test.sh

  MacOS:
      macos:
        xcode: "14.2.0"
      steps:
        - run:           
            name: Setup Python
            command: |
              brew update
              brew install pyenv git
              pyenv install 3.10.8
              pyenv global 3.10.8
              eval "$(pyenv init -)"
              python --version
              pip --version
        - checkout
        - run:           
            name: Install EvaDB package from GitHub repo and run tests
            no_output_timeout: 30m # 30 minute timeout
            command: |
              python -m venv test_evadb
              source test_evadb/bin/activate
              pip install --upgrade pip
              pip debug --verbose
              pip install ".[dev]"
              source test_evadb/bin/activate
              bash script/test/test.sh 

  Pip-PyPI:
    resource_class: large
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - run:
          name: Install EvaDB package from PIP and start server
          command: |
            pip install --upgrade pip
            pip install evadb
            bash script/test/package.sh

  Pip-Local:
    resource_class: large
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - run:
          name: Install EvaDB package locally and start server
          command: |
            pip install --upgrade pip
            pip cache purge
            pip install "."
            bash script/test/package.sh

  Docker-Local:
    resource_class: large
    docker:
      - image: cimg/base:2023.05

    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build EvaDB Docker image and start server
          command: |
            docker build -t evadb docker
            timeout 30 docker run evadb || true

  AWS:
    resource_class: large
    docker:
      - image: cimg/aws:2023.05

    steps:
      - setup_remote_docker
      - run:
          name: Pull EvaDB Docker image and start server
          command: |
            aws --version
            docker pull evadbai/evaserver
            timeout 30 docker run evadbai/evaserver || true
